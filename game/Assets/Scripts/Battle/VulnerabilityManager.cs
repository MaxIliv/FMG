using UnityEngine;

namespace RPG.Battle
{
  // This class is used for Character Vulnerability Calculations
  public class VulnerabilityManager : MonoBehaviour {
  [SerializeField] public BattleCharacter battleCharacter;
    
    void Awake()
    {
      battleCharacter = GetComponent<BattleCharacter>();
    }

    public int Damage(Weapon weapon)
    {
      int damageIncrease = 0;
      damageIncrease += ToPiercingDamage(weapon);
      damageIncrease += ToSlashingDamage(weapon);
      damageIncrease += ToBludgeoningDamage(weapon);
      damageIncrease += ToMagicDamage(weapon);

      return damageIncrease;
    }

    int ToPiercingDamage(Weapon weapon)
    {
      int toPiercing = battleCharacter.vulnerabilities.toPiercing;

      if (weapon.Piercing && toPiercing > 0)
      {
        int damageIncrease = CalculateVulnerabilityDamage(weapon, toPiercing);
        Debug.Log("Vulnarability to Piercing attack! - Damage bonus is " + damageIncrease);
        return (int)damageIncrease;
      }

      return 0;
    }

    int ToSlashingDamage(Weapon weapon)
    {
      int toSlashing = battleCharacter.vulnerabilities.toSlashing;

      if (weapon.Slashing && toSlashing > 0)
      {
        int damageIncrease = CalculateVulnerabilityDamage(weapon, toSlashing);
        Debug.Log("Vulnarability to slashing attack! - Damage bonus is " + damageIncrease);

        return (int)damageIncrease;
      }

      return 0;
    }

    int ToBludgeoningDamage(Weapon weapon)
    {
      int toBludgeoning = battleCharacter.vulnerabilities.toBludgeoning;

      if (weapon.Bludgeoning && toBludgeoning > 0)
      {
        int damageIncrease = CalculateVulnerabilityDamage(weapon, toBludgeoning);
        Debug.Log("Vulnarability to Bludgeoning attack! - Damage bonus is " + damageIncrease);

        return (int)damageIncrease;
      }

      return 0;
    }

    int ToMagicDamage(Weapon weapon)
    {
      int toMagic = battleCharacter.vulnerabilities.toMagic;

      if (weapon.Magic && toMagic > 0)
      {
        int damageIncrease = CalculateVulnerabilityDamage(weapon, toMagic);
        Debug.Log("Vulnarability to Magic attack! - Damage bonus is " + damageIncrease);

        return (int)damageIncrease;
      }

      return 0;
    }

    int CalculateVulnerabilityDamage(Weapon weapon, int vulnerabilityPercentage)
    {
      float damage = weapon.WeaponDamage;
      damage = damage / 100 * vulnerabilityPercentage;
      damage = Mathf.Round(damage);

      return (int)damage;
    }
  }
}